- nel teardown (main) noi sappiamo già quale sarà lo zip di destinazione, rimuovere ritorno del processor e argomento da teardown
- semplice cache, controllare se quel file è già su s3, se si mandare direttamente il link via mail altrimenti come ora
- aggiungere la possibilità di avere più destinatari mail
- aggiungere una modalità di aggiornamento. Si chiede di scaricare una playlist, alla prima esecuzione ci sono 152 video, alla seconda 163.
  Scaricare solo gli ultimi 11 e caricare su un secondo file zip e inviare una mail con entrambi i link

POSSIBILI MIGLIORIE FUTURE

- chiamata a chatgpt o qualche altro tool (meglio se gratuito) per recuperare i metadati di una canzone e settarli su yt-dlp per avere
  canzoni con metadati più corretti (nome esatto canzone e artista)

- dockerizzare l'applicazione (e non installare sul pc python e quant'altro)

- tenere traccia da qualche parte (es tabella posgres) delle playlist già elaborate. Per fare questo, servono ulteriori controlli:
    - Recuperare il numero di elementi attuali della playlist, se diverso rispetto a quello in tabella rielaborare tutto,
      altrimenti si continua
    - Elaborare in qualche modo un digest/chiave univoca da ricavare dagli id dei video della playlist ordinati
      in ordine alfabetico, in modo da controllare se i video dentro la playlist sono diversi (un video è stato rimosso
      ma ne è stato aggiunto un altro)
  se questi troviamo tutto in tabella allora non elaborare nulla (conversione in mp3 e scrittura s3) e mandiamo
  direttamente la mail coi link ai vari zip (magari salvati su un'altra tabella), altrimenti
  eliminare dal bucket quello che è sotto la chiave youtube/{id playlist} e rielaborare tutto

